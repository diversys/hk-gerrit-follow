import re

from config import AUTH
import db
import gerrit
import paths


__all__ = ('review',)



def _clean_msg(s):
    s = re.sub(r'objects/haiku/[^/]*/', 'object/haiku/<arch>/', s)
    s = re.sub(r'(download/\S+-)[^-]+\.hpkg', r'\1<arch>.hpkg', s)
    s = s.split('\n')
    last = s[-1]
    if (last.startswith('...failed updating ')
            and last.endswith(' target(s)...')):
        s = s[:-1]
    return '   ' + '\n   '.join(s)


# TODO: references to 'master'
def review(change, gerrit_change):
    if AUTH is None:
        return
    # TODO: declared in testbuilds
    if 'WIP' in change['tags']:
        return
    # TODO: db.get_latest_build
    try:
        build = change['build'][-1]
    except IndexError:
        return
    if build['picked']:
        return
    if not build['rebased']['*']:
        # TODO: maybe it is reviewed and now there are conflicts
        return
    rev_info = gerrit_change['revisions'][gerrit_change['current_revision']]
    if build['version'] != rev_info['_number']:
        return

    same_as_parent = True
    same_as_last = True
    all_ok = True
    last_review = change['sent_review']
    current_review = {}
    parent = db.data['release'][build['parent']]['result']
    for arch, result in build['rebased'].items():
        if arch == '*':
            continue
        current_review[arch] = {
            'ok': result['ok'],
            'msg': 'OK'
        }
        if not result['ok']:
            all_ok = False
            current_review[arch]['msg'] = _clean_msg(result['message'])
        if arch in last_review and last_review[arch]['ok'] != result['ok']:
            same_as_last = False
            if result['ok']:
                current_review[arch]['msg'] = 'fixed'
        if arch in parent and parent[arch]['ok'] != result['ok']:
            same_as_parent = False
            if result['ok']:
                current_review[arch]['msg'] = 'fixes master'

    if ((last_review['version'] != build['version'] or not same_as_last)
            and (all_ok or not same_as_parent)):
        if all_ok:
            score = '+1'
            if same_as_parent:
                message = 'Build OK rebasing over ' + build['parent']
                if not same_as_last:
                    message += ', fixes previous version'
            else:
                message = 'Build FIXES ' + build['parent']
            message += ' [' + ', '.join(current_review.keys()) + ']'
        else:
            score = '-1'
            message = 'FAILED build rebasing over ' + build['parent']
            msgs = [result['msg'] for result in current_review.values()]
            for msg in msgs:
                if msg != msgs[0]:
                    for arch, result in current_review.items():
                        message += '\n\n' + arch + ': '
                        if result['ok']:
                            message += result['msg']
                        elif (arch in last_review
                                and last_review[arch]['msg'] == result['msg']):
                            message += 'still broken'
                        else:
                            message += '\n\n' + result['msg']
                    break
            else:
                message += ' [' + ', '.join(current_review.keys()) + ']'
                message += '\n\n' + list(current_review.values())[0]['msg']
        message += ('\n\nhttps://haiku.movingborders.es' + paths.www_link(
            paths.www(gerrit_change['change_id'], build['version'],
            build['parent'], None)))
        gerrit.post_review(gerrit_change, {
            'message': message,
            'tag': 'autogenerated:buildbot',
            'labels': {'Verified': score},
            'notify': 'OWNER',
            'omit_duplicate_comments': True
        }, AUTH, quiet=True)
        current_review['version'] = build['version']
        current_review['score'] = score
        current_review['message'] = message
        change['sent_review'] = current_review
        db.save()

